"When I started working at a Vietnamese restaurant, I signed up to work for more hours than I could handle."
I learned that there are scenarios where some apparently less efficient solutions are actually more efficient and should be kept in mind.
"One of the most valued characteristics of a good UI is letting people have as much control as possible, so as to satisfy all user groups."
I made a mistake that lead to a breakdown on some internal service during an internship. I learned that testing is important in real life.
I learned that the simplest can sometimes beat the most innotative. I strive to buld solutions that are better suited for the end user.
"When my code got  deployed, it broke the program, meaning nobody could sign up for shifts.   I needed to validate the results of my code."
"I learned that being over zealous and volunteering can not only harm me, but could be a huge inconvenience to others as well."
"Regardless of how well I manage my time, I would still have a limited number of things that I could commit to and do well in."
wrong about how I should manage my time abroad-focused on schoolwork-wished made more friends and explored and travelled more
"I should not make commitments that drain me and leave me without sleep because I end up not being present, and it is unhealthy."
didn?t really know what computer programming actually was but I thought I would hate it. ended up loving the class and realizing I love CS
Once I thought doing well in one specific field will help me get a job but learned that there's way more expectations [skills] from the employer side
"I spent hours practicing a presentation, but then I went blank. I need more public speaking skills"
I was wrong to read the slides without looking into it. This taught me the valuable less to be fully responsbile for any work
"I felt as though my story idea was not good enough, and I learned it was the way I was presenting it that was wrong."
"took more credits then needed, no time for hobbies/activities, was wrong in thinking that it was important to take that many classes"
"If I decide to take on more work and more responsibility even for the short summer, that's my decision and thus, it's my responsibility to make sure that it has a positive impact."
My lack of preparation for the presentation caused confusion for the stakeholders who were introduced to the product for the first time.
It's helpful to start from the appropriate documentation of the target tools when you try to accomplish a programming task and get stuck.
realized how important it was that our platform provided unique features that made users excited even while performing often mundane tasks
I should not just copy and paste some code at the beginning. [should design something myself so it fits my needs]
It's better to read through the appropriate documentation and prototype your own solution than to rely on the walk-throughs and tutorials.
[messed up project deadline] avoiding a repeat by attempting to write down my deadlines and have short-term goals before the deadline
I learned that sizing up your work to present and your abilities is indeed a skill.
I learned that you have to work harder than everybody else to start something new.
"Do not assume there are tutorials online for everything. Don?t give up if there isn?t one. Always explore the official docs or even the source, there might be chance."
"Now, anytime I reference, produce, or present anything, I take full ownership of the subject."
"I learned that it's important to swallow your pride and ask for help, even when you don't want to."
I was told that I was spending too much time by being a perfectionist. I adjusted my working habit
I learned to question my assumptions and not be afraid of asking questions in any type of situation.
I learned that there are people who know better than you and it is not a shame to ask others for help.
"[java issues] redid all my work, made sure to read the documentation for everything. It turned out well"
"As a Computer Science student, no document is so familiar that is okay to overlook since the field is ever-changing."
We lost a day's worth a work waiting for an answer. Whenever you're stuck on something take a break and work on other areas of the project.
I that even great products need equally well-prepared and effective presentation to gain the approval and love of a wide audience.
I learned that I could easily get overwhelmed when I tried hard to solve an issue caused by myself but could not do anything helpful.
I created my own algorithm that combined some of the techniques along with ML. I learned to read all documention for any code I find.
"when developing an application based on certain requirements, think from different perspectives about potential bottlenecks in performance"
I learned that its vital for team members to split up work snd establish early how this splitting up can be made as seamless as possible.
A product is nothing without the customer.
I learned that I should always push myself.
"I didn't consider that my friends were unfamiliar with Java, so they were frustrated during hackathon and our progress was painfully slow."
"I should have learned to take things little by little, but I did not."
I did an interview with 100+ lines of code. I learned that it could be done in 15 lines I learned to look at different ways to solve.
"I learned how important it is to try the simplest thing possible first, in case that works, rather than trying the fancy idealistic model."
I learned to always think about the edge cases that can cause things to go wrong.
we realized the importance of integrating a simple A/B testing step in our design process.
"There's a balance between doing it right"" and ""doing what we want without overengineering""."""
"You can't always keep track of everything in mind, especially working in a team environment."
"My partner and I split the presentation content, and my partner stumbled and I couldn't help. I learned that we should have worked together"
You can create something wonderful but it's not complete until it is in the customer's hands.
"I realized that the ultimate user's feeling also matters, even more than the technology itself"
I had not taken into account the needs of the wider audience whose interests and specialties vary.
"I met my best friend in ROK Army and I joined a year later. I decided to study in the USA following him despite others disapproval, it worked out"
"Finally, I notice that sometimes inspiration is needed and it usually comes from other parts of our life. [rather than focusing only on one thing]"
"Groupmate pointed out a coding mistake, so I corrected the mistake and I never made the same mistake again."
"communicate with team as soon as you realize that something is wrong, so everyone is up to date with changes and can adapt to the situation"
"I thought I less prepared for my first cs class, but I was wrong. I found other people were feeling similar."
I understand the importance of working through a problem on paper with a team member before implementing it.
"I learnt from it I need divide my project into small steps, and check whether it works after each small step."
Just because something is challenging or new doesn't mean that you're not qualified for it or at a disadvantage.
rigorously testing code before deploying is vital because it's better that unexpected behavior arise during testing
I made a mistake that lead to a breakdown on some internal service during an internship. I learned that testing is important in real life.
I learned that it is better to cover the most basic and fundamental aspects of a project before doing anything else.
"When designing features, target problems that users do have rather than invent the problems and then try to solve them."
Friends could be wrong in knowing what?s best for me and that no one should be so quick to assess and judge another person.
I turned out to enjoy working with people with less technical backgrounds. THey look at things from a different perspective
"I overestimate my ability to manage schoolwork, extracurriculars, and internship, and ended up quiting my internship earlier."
"I understand that we can not always make a big break, sometimes a small change or a small innovation also needs lots of effort."
"When working on a project/feature that involves multiple teams, teams need to collaborate when coming up with the project specs."
"I realize the importance of open communication because although they did no work, I was partially at fault for not talking with them sooner"
"By teaming up with a friend I learned to have clear conversations, to discuss expectations and boundaries for the pset or project."
"I assumed that Columbia students would want the same seating options as Harvard students, but the survey results showed otherwise."
"I was wrong in pursuing a certain relationship. I learned to take a step back, and think want I really want, and not what is assumed of me."
I learned that it's important to see the big picture first before going into details so that I can consider many different options.
"I learned to be more honest about what I can accomplish with what I have, and that allowed me to create better, more in-depth work."
"I should first try to understand the audience's needs, desires and pain points, and use my project to first learn to learn myself."
"I was nervous to major in CS and was intimidated by the other students in intro courses, and was wrong about thinking you needed background"
"I never knew that I could rewrite my life script. I realized that I was writing my script, and that I had control over this script."
I learnt that we should always design and develop our product based on real users' experience and always do it in an incremental way
"I didn't have more empathy for my boss, who could not have seen how his actions looked from our point of view without us speaking up"
the importance of taking your own happiness in consideration before making long-term decisions that might benefit you in the future
"I find CS classes at Columbia difficult and intimidating, but I realize that time and effort will lead someone farther than one's talent""."""
"We should first make up a frame and then add features little by little, and at the meantime we should keep testing the new features."
"When I took ML, the group hw became meaningless because there was no teamwork. I learned to collaborate and be a better group leader."
I learned the importance of knowing your users and that only design and technical knowledge is not enough to decide what to build.
"I realized it was important, especially when working on a team, to communicate my misunderstandings before getting too far into the project."
"You can never over communicate"" with your team. It's better than to leave something uncommunicated."""
"I mistakenly loaded wrong dataset, which caused unexpected good performance. supervisor realized. I learned that too good to be true""."""
I realized that I could ask my group members to do more because they were more competent and more likely to work quickly through mistakes.
I thought coding up a functioning program could be done in one sitting. I struggled but I learned never to underestimate a project again!
I started a group food delivery model but it had no market. We changed our approach to seeking out a problem
I missed a deadline so I created a spreadsheet for all future projects to track progess
I was wrong to estimate the compexity of the task. It took the entire night and morning. I learned not to underestimate any tasks
"I was tasked with organizing the startup career fair. I did not understand how to do this, so my teammate told me how to talk to companies."
I learnt that we should always design and develop our product based on real users' experience and always do it in an incremental way
I realized that I was trying to do too many things and I couldn't be  a jack of all traded. I learned that I had to choose and priorize.
Since then I have always ensured that I communicate my difficulties to my immediate supervisors so that they are not caught off-guard.
I learned to use Calendar to fill the important events to the timeslots so that I would never missed a deadline.
I learned to plan my deadlines so that I could accommodate any last minute requirements and emergencies and still deliver comfortably.
we realized that the best way to approach the problem was to focus on many different types of users and not only the higher ranked users
I thought coding up a functioning program could be done in one sitting. I struggled but I learned never to underestimate a project again!
I underestimated multiple projects that were due on the same time. I learnt to give up on some portions to get the majority of the credit
I learned to first communicate with my teammates and know what to do next. It turns out that it?s worthwhile and somehow necessary to do.
My board and I hosted a photo critique workshop. I learned that empathy and imaging yourself in someone else's shoes are crucial skills.
"I should be honest about by work and my estimates, and it's my duty to ensure I meet deadlines by working harder if I've slacked earlier."
"I underestimated the time it would take to develop an app, I learned to really take the time in estimating the time of project completion."
"I should be vocal and ask for lighter load, different parameters, time, etc. early on so that the team can adjust less urgently."
Since then I have always ensured that I complete my work on time.
"to surround myself with those who push me and hold me to a standard I struggle to meet, but who inspire me to be a person of that quality"
"I wrote some database access methods incorrectly. I handled the situation by informing my group, and they were able to solve the problem"
In a hackathon I suggested an implementation which ended up costing us time. It taught me the importance of not over complicating things.
From this experience I learned not to stretch myself too much and to manage my time better.
"in undergrad, I chose to focus completely on courses. now I wish I was involved more in public interaction and thus built a better network"
I learned that interaction and collaboration between people in seemingly unrelated fields can foster new areas of interdisciplinary research
That made me awared that the importance of UI/UX and started to learn how to make better user interface.
I now understand that there is a lot of thought that goes behind what seems to be just a pretty (inter)face.
User interfaces and presentation are necessary to interact with and generate trust in smaller projects as well.
"I learned that user interfaces, and presentation in general, isn't just a concern for large-scale, polished tech companies."
I used to disregard good design. Looking at them from a third perspective gave me a clearer image and I decided to code my own css.
My project depends on the order of the data. My hack was to work in data sorted by ydefault.
it scares not knowing how data flows throughout a program until run-time. I realize that was wrong and I should treat programming as a tool
"I learned back-end Learning how to manipulate and sort data seemed big was my instrouction to networking, protocols, and user connectivity"
"I was wrong about the implementating of teh backend of my project. I used python instead of sql, and this required a complete overhaul"
"learned how to write scalable and maintainable react code REACT with constant feedback from boss, led to a great product and experience"
I learned about the importance of JavaScript in making a website interactive and also about a variety of different JavaScript libraries.
"Computers are unintuitive machines, and it's up to me to make sure everything is perfectly aligned to pave the way for meaningful code."
I realized VCS's key role in software development process.
What I learned was to think about extensibility and modularity far in advance.
"I used to ignore the function of JQuery, when writing front end webpage using Jade."
"as we go through the debugging process, we will have a deep understanding on mistakes we made so that we could avoid that mistake next time"
Dealing with promises and asynchronous function calls taught me how to approach unfamiliar paradigms.
"I learnt we need to add functional click on webpages, using JQuery or functions in HTML called JSP page."
"When building a web application, I learned that microservices operate differently than monolithic architecture."
"We 3D-printed our designs and put them to the test, and he won. Afterwards, he explained some great design principles."
Understanding is important because timer interrupts server as the entry into the linux scheduled to priotize processes.
So I actually had to call on our microservice and I was able to learn about front end web development because of this mistake.
"I lost an argument about AI, but I started to read more on why the human aspect of design and interface is almost irreplaceable."
It turns out you can do production level machine learning using only a few thousand labeled training data and facebook does that.
I programmed a script that took a long time. It caused me to call behind. I didn't put enough effort in verifying my implementation.
"I learned that I could compartmentalize different aspects, to scale up one function or service without scaling the entire application."
I realized our viewers wouldn't want to share on their timelines??it didn't speak to a shared experience and lacked comedic effect.
We made our app very scientific but then realized that no one would use it. I learnt that we first need to know our targets and their needs
I was careful and cognizant going forward. I focused on the intended user experience and the experience resulted from non-intentions.
"I was contracted to create a hotel management app in India. I assumed something translated across cultures in a way it didn't, and I missed a feature that could make my app more familiar."
This incident taught me how having a good UI helps build a first impression which goes a long way in the end users satisfaction in a project
I learnt that having an extremely capable product is essentially useless if the user does not have intuitive access to those very functions
"Working in industry and starting a software company with friends, it is extremely importnat to be well rounded in CS [web development]"
[working with imperfect data] you can take something imperfect and still find ways in which it is valid and useful without ignoring or hiding its problems
"I learned to read documentation, understand software infrastructure of a big corporate company, and manage my time and priority."
"[making art] I was wrong about only certain opinions mattering, and it's important to create art that really speaks to other people?s hearts"
I should make sure that I know of any complaints/requests made by parents since they're paying for their children's improved performance.
"I was tasked with building an API. At first, I found this overwhelming but I wasn't afraid to ask for help from my mentor who guided me."
I learned not to assume without concrete information.
I now ask for help much more often than I used to before.
You shouldn't be embarrassed or afraid of asking for help.
"I learned to be far more self-aware of my own faults, and less staunchly proud of my work."
I will always remember that it is better to stay grounded (literally) than to pretend you know all the answers.
"I went to the wrong location and missed the appointment, because I did not let my mom explain fully, but assumed to know all the details."
I learned the importance of consistently questioning one's self over choice of design for a client's use.
"I thought Finance is best for me, but I was wrong because it was not for me after I had experience as an investment banker."
"I thought Finance is best for me, but I was wrong because it was not for me after I had experience as an investment banker."
The biggest mistake I made is selecting wrong major in undergrad.  Learned to selec major based on interest
"I thought I wanted to do finance, but I was wrong."
I learnt to cut my losses and move into a field that I like. It is better to change your mind than to keep going in the wrong way
"I also started standardizing how I visually represented concepts, which provided a common framework for illustrating how I used it"
I didnt realize how much behind I was with tech experience. I utilized the resources at my disposal to improve and learn.
"I thought I wanted to ben an English major, but I realized I was wrong. I regret the time I wasted"
"I was wrong that I wanted to devote my life to sustainability consulting. I wanted my impact to be on an individual, so I got into comp sci."
I realized that college was going to be much more challenging than high school.
"I routinely try to explain things to myself or others to poke wholes in what I know, and start from first principles as often as I can"
"knowledge may be forgotten if we have not touched it for a long time, and things would not be as easier as we thought in the early time"
"I wrongly predicted I'd enjoy graphic design but I know what kind of design I want to pursue, so I don't regret taking the course at all!"
"I can't assume a formula for all programming problems, but rather understand how the interconnected parts work together to make a product."
"I was wrong about what I wanted with my future, which led to self-reflection where I was able to determine which direction I wanted to go."
I became aware of how important mathematical problem solving is to me and I needed to change course instead of staying in an industry that didnt interest me
...they chose the current algorithm because of its ability to give users fast results. I learned to be curious before providing criticism.
"[code debugging] learned that a trivial"" mistake could cause a big problem"
realized as I got higher and higher in computer science I would have to apply myself more.
I use Google and Piazza to study not only from my TA and professor but also my classmates.
"Don't try to re-invent the wheel, and be very mindful about existing resources and knowledge [program in JS]."
I learned from this that I should always check if where I want to go is open before going there
I realized I needed to change course instead of staying in an industry that wasn?t fulfilling me.
"I quickly learned that not every concept will be clear to me at its first instance, and that's okay."
I realized I studied the wrong thing and it really made me reconsider my workflow for lecture-based classes.
I learned that sometimes its best to take the risk and to hear out other people and take a decision without looking back
"Received negative feedback on proposed spec and had to fix, along the way, I gained valuable insight into the aspects that I had neglected."
I would not believe in something that I think it is. I learnt to verify the answer and make sure I am right before I tell someone about it.
"I learned that while questioning mentors about why"" something is done is good"
You should never be too invested in anything until you get to experience it first hand and there is no shame in following your heart.
"I did not PDF a hard class, leading to a bad grade. However, I learned that what I get out of a class's content is far more important."
I learned the value of engaging folks with institutional knowledge.
"[incorrect understanding of concept led to HW mistake] upon looking at the HW solution, I understood the concept and was able use it later"
"I learned the values of careful research, re-evaluating design choices on a daily basis, and considering tradeoffs."
"The value from different perspectives, when combined together is significantly greater than from one individual perspective."
"I learned that as I expand my social interactions circles, my worldview is expanded to include more ideas and possibilities."
I moved to Russia for a year and I learned more about the world and myself in that year than I could have in any other situation.
I learned to be vigilant about coordinating with people. I would manage to coordinate a week before and double check with the exec board.
"Sometimes I don't quite understand or misunderstand the assignment, and start working on it."
Planning ahead and confirm with teams is a more important step than the actual implementation.
"Regardless of where the information comes from, if I am using it, I must understand it at its source."
"I have learned to be more suspicious when I feel too good (that is, elitist) for something unfamiliar."
"we often spend to much time trying to look at the specifics--the beauty of CS is that sometimes, its just a simple little thing we overlook"
"From then on, I never started working on a computer without making sure an appropriate backup was done."
"I developed my own algorithm by carefully observing colelcted data, and I learned to never neglect details."
"I had forgotten what it is like to be lead, not just to lead. I try everyday to be a more thoughtful person."
During a class discussion a student asked why we were learning about politics if we can't even be good people.
My lesson from this story is to always double check locations and that there are always other options even if the first one fails.
I used a library which was not authorized and I learned to always check with the specifications or the product owner.
"I learned that regardless of how simple the task is, I need to carefully plan in order to be an efficient programmer."
"Now, I start all my programming assignments early, leaving time for me to think about the program, mull over the design, and ask questions."
"I thought following the majority was the right thing to do, even if it was at the expense of someone else?s wellbeing."
"I learned that complex and creative design could be incredible, with extreme out of box thinking and pattern matching."
"It taught me the importance of attention to detail, double-checking work, coming to terms with mistakes, and resilience."
"Working on a startup, jumped the gun at the beginning when we should have done more market research to validate the concept before building."
"just carrying some paper in my bag for notes b/c was convinient. lost some papers, realized I should have used notebooks."
"I learned that getting teammates more involved created better results, both in terms of winning and the team?s happiness."
I wrongly assumed that my substitution technique would work for vegan brownies. This taught me to be thorough in my research and food prep.
"I did what others perceived to be right, rather than combating the social injustices, the bullying, and the discrimination."
"I also understood that a successful project cannot be a replica, but rather must be informed by community-specific research."
"I had thousands of lines of code. I comment out two lines, so I could deduce the source, but it did not work."
I learned from studying history that I was wrong about my perspective on museum collections and their colonialist implications.
I learned that creative leadership centers much around giving space to the talented group I have brought together to be amazing.
I learned to think about designing systems before implementing it and make decisions rather than coding each problem as it comes.
"I should not make commitments that drain me and leave me without sleep because I end up not being present, and it is unhealthy."
"I learned to keep the lines of communication open, be diligent regarding every detail, and have redundancies and backups in place."
It was a valuable lesson on time management and my silliness to ask questions so that I don't have to repeat things.
I made the rubric way too strict and I also didn?t browse through the answers before designing the rubric to find common mistakes.
I should listen to what people are telling me and take in the information and then ask clarifying questions if needed.
"Although my algorithm wasn't wrong, there were many other possible ways that I missed to approach the problem in a new way."
I learned to keep an open mind and try to understand people and empathize with them before making assumptions.
"I wrote some database access methods incorrectly. I handled the situation by informing my group, and they were able to solve the problem"
"Hours before a deadline, I realized my code was wrong. From this I learned to raise concerns early and look at the problem from more angles."
"I went to the wrong location and missed the appointment, because I did not let my mom explain fully, but assumed to know all the details."
"I am more conscious about the political and ethical choices that I make in my work, and strive not to repeat mistakes of the past."
"I got into an argument with coach. I was wrong for not respecting him, and I learned to be a leader and resolve issues in a better manner."
I made assumptions about key services during system design. I learnt to be aware about any assumptions I make while approaching any problem
We understood that the startup had to shut down because we werent focused enough. We learned to focus & persevere
"I coded a web app with no knowledge of JavaScript I assumed it would be easy, but it was not. it's important to make not make assumptions."
I learned that the important of having a clear plan in mind before approaching a problem and also executing it in an organized way.
"I didnt speak up when I should have to get help, and it led to a less precise final project that I needed to get more time for."
"I thought we fix the accessibility issues, but I was wrong. I reflected on my biases, and this influenced how I think about other projects"
"I was in a group with people I didn't know I thought I would have to do the work, I was wrong, and my team was responsible, and hardworking."
"I was asked to develop this algo. I chose to handle it alone, and bad mistake. I asked the PI and learned a better way to approach the task"
"I learned that my assumptions cant always be trusted, so asking for help from a coworker or supervisor is often a good precaution"
[learned to love exercising] I fell in love with it and started to live a healthier lifestyle.
learned not to overestimate myself
"believed that noSQL databases were fundamentally better then SQL databases, but found that there are particular benefits of SQL databases."
"When interviewing a CEO we wrongly assumed people would be interested in facts, showing the gap between what we and our audience want."
"I misunderstood an aspect of a project, making the final product not what was expected. I learned my lesson regarding asking questions."
The most important thing when working in teams is being open-minded and willing to hear other opinions that may disagree with your own.
"I learned to be more open minded about new or unfamiliar tech and platforms, explore different options, and hear out my teammates more."
[someone said bet you can't do a trick with remote control airplane so tried and broke plane] learned about shear stress forces and machismo
"As a member of Lydia's Lab, I learned that commitment, patience, diligence, and love can take you much further than pre-existing talent."
"I didn't trust my grandmother?s cell phone knowledge, but I learned that she's smarter than me even regarding things related to my major"
learned that I should care for my mom more and had a better way of dealing with argument other than not talking and breaking both our hearts
"I once went out with my friends on Valentine's Day because my significant other said it was fine"" for me to do so"
"I believed that people were either technical or creative. When you confine yourself to a single label or definition, you limit potential."
"Being a TA I learned to document how I explained concepts, so that I could follow up with clarifications via email or the following week."
I need to come up with pre-set rules to determine when I will buy and sell [bitcoin] instead of just ad-hocly hoping that I get lucky
"I slowed down my thinking and considered different approaches before starting a project, and realized the influential power of teammates."
"I should never close off or cut off someones opinion-- I should be open to whatever they have to say, whether I think it's right or wrong."
"I could have called for help, or admitted that I wasn?t certain about the route, but instead we just ran without really thinking about it."
It's okay not to know everything by yourself.
learned to understand professor's perspectives
don?t let my emotion overpowered rational thoughts
Remaining calm can help with getting all of the facts.
I should always question preconceived judgements I make.
I learned that commitment is the first step to success.
I learned the importance of consulting external sources.
Having preconceptions towards something could be dangerous.
"When in doubt, it's better to confirm than act incautiously."
I need to listen and be flexible with my teammates in projects.
I'm practicing recognizing when I need help a bit more each day.
I learned that it would never be late if you want to have a change.
there is no one right way to do things so it's best to keep an open mind.
I learned that just because I am right doesn't mean someone else is wrong
It is not always possible to rely solely on one's self to realize success.
I learned not everyone's priorities are thes ame and they change over time.
I could have provided tangible help by seeing things from her perspective.
What I learned from the ordeal was to not prematurely judge or assess situations.
I learned the importance of maintaining good relations with team members as you work to the same end goal of making a working product.
It is very likely that I am wrong and need to re-evaluate the basis of my argument.
I learned a true lesson on academic modesty and the dangers of thinking inside the box.
I learnt from it I should not go into one way for a long time until finding it is wrong.
Another side lesson I learned was the value inherent to making the most of what you have.
I learned to not judge people by what I see because my perception of them is unidimensional.
My brother felt isolated and ignored. I realized all he wanted was his sister to support him. It just makes me wish I had been there for [my brother] earlier. I am telling myself that it is better to start late than not at all.
"In the Marine Corps I didn't take good notes on my repairs. From then on, I ensured I did not miss any steps and could reproduce my results."
"I looked again, and there was a black Jeep. I learned not to make assumptions about anything."
"I was too sure about my solution, so I was not able to see other possible interesting options."
"Once I began using Linux more, I really enjoyed the control I had. I was just scared of change."
I learned that I have no chance before a girl who prioritizes academics over all other things in life.
I have realized that sometimes the best thing I can do is mind my own business and take care of myself.
I think the important thing when unsure about something is to talk to somebody who's also working on it.
[couldn't get into a class thought could] I learned to take into account that there are so many people in the world who want so many things that are so similar to things that I want
I have learned that there is a point in every argument when it's time to stop talking and start listening.
"I should not let feelings of failure control my actions, but instead beat them and finish a project instead."
I learned not to assume things about others without actually experiencing concrete information or responses .
I learned to keep an open mind and try to understand people and empathize with them before making assumptions.
I learned to ask for help earlier when struggling and not assume that others would not know better than I would
"I need to directly voice how I'm feeling, instead of letting feelings control how I act, and leading to actions that have negative impacts."
Asking for help can go a long way and make what could be a difficult task much easier than expected in the end.
"People change, and those around you affect who you become, the tendencies you acquire, and the standards you hold"
I became aware of my need to balance out the stimulation of the logical side of my brain with the creative side.
I learned from this to carefully consider all solutions and the drawbacks of implementing each and to ask for help
I had to both understand the principles behind software design as well as actively engage in project deliberations.
"I had a negative first imporession of a person, and I was wrong. I try to have an open mind when I meet new people."
"The mistake I was that I assumed the checkpointing format was a set format, and that it's the same for every language"
I should listen to what people are telling me and take in the information and then ask clarifying questions if needed.
"I stay quiet, listen, and pretend I know what they're talking about, instead of trying to stop them and ask questions."
I learned ...that even if someone has a negative response they may be open to a conversation about how that impacts you.
"In reality, I should have learned to read between the lines, to see that whatever was causing her shortcomings as a writer."
"Approaching unfamiliar situations with too much confidence is not good thing, and it's better to look ahead to be prepared."
"I missed a MVP deadline and I learned the value of communicating even when it is bad news, and to always reach out for help."
I enjoy learning from every experience--whether I'm right or wrong-- but I believe the key is recognizing when you need help.
I can also thank the kindness of strangers who've actually returned things to me... restores my faith in humanity every time.
"When I found out I was wrong about the spelling of tongue"" in 5th grade for a group project"
"I assumed that I should hold posting updates until I have verified results, but our supervisors actually wanted updates ASAP."
"What I learned from this was, regardless of who has the position that dedicates them as the leader, leading is a team effort."
In the final of an important chess tournament where my haste and arrogance caused me to make a big blunder and lose the title.
I alway sreluctant to ask doubts/queries because I feel stupid and judged. People were very helpful and humble answered though.
"I can not ignore the health. Good sleep, eating well, and regular exercise will give me a better condition to learn more things."
"I was there to learn from the other developers, but came in with the mindset that I needed to be able to do everything on my own."
I was too confident about my learning skill and didn't learn how to cook meals I was satisfied with before I started living alone.
I learned it was better to ask for help than try to conquer my imposter syndrome by passing off as super confident when I wasn't;
I made the mistake of trying to direct every aspect of the group presentation.  This showed me the importance of working in a team
I [wrongly assumed] that a Christian friend would be very judgemental and not accepting of my sexuality. But... she was accepting.
Don't make too many assumptions when learning something new.
"In data science, institutionalized oppression can be continued through the use of archived records that were affected by prejudice."
"Going to office hours and tutors is not a sign of weakness, but rather a fantastic decision in getting the most out of my education."
"I learned to always question what I think is the natural way of doing things, and ask someone who is more experienced when in doubt."
"I realised that we did not conduct field research before, and just assumed that simple band making skills were what the women wanted."
"Everyone likely has a reason for acting the way that they act, and we shouldn?t make assumptions without getting to know them first."
"I kept advocating my idea, but I realized that my team members had a better one. I realized that my suggestion made things too complicated."
"Every situation can be approached from multiple angles, and that one should strive to approach from the most positive angle they can."
"I had a fight with my sister and I went too far, so I hurt her. I learned to come into fights thinking about how to best lead to resolution"
I should question whether all information over a particular system is being correctly applied for optimal performance.
"I was wrong not to email the TA about a simple question of the paper, and wrote it under false assumption and got a low grade."
I learned to ask for help earlier when struggling and not assume that others would not know better than I would
I got stuck on an AP lab. I dismissed my friend's suggestion of starting from scratch. It would have been more efficient if I did.
"I learned that when I'm rushing/missing details, as well as the value of being self aware when receivng feedback."
"I learned that people in positions of direction are there for help, they are capable of giving it. I learned that I should be less stubborn."
"I believed that I did not need others' help, but when I did get help I became more successful in my assignments and my grade improved!"
I started a group food delivery model but it had no market. We changed our approach to seeking out a problem
I was overconfident about a semester-long research project. I learned the importance of starting with a prototype and then add features.
"I learned to be skeptical about appearances, and to look more deeply into the ?how? and ?why? of phenomena that I had taken for granted."
I didn't understand the complicated technical details behind the platform and learned to be more humble and learn from other colleagues.
I realized that it's important to not take anything for granted.
I was wrong about the scale of the group project and acquired teh wrong materials. I learned to communicate &\ know project specifications.
"As a TA, I gave a wrong answer instead of doing research. I now know that correctness comes before speed."
"I should be thoroughly prepared and before I place blame on others, I should look inward to see where I could do better."
"I learned to always double-check and test everything in CS, and to not blindly rely on documentation that might be out of date."
"While gut-feeling is important, it's also important to pay attention to the advice from people with more experience and knowledge."
I learned to be less cynical to new approaches to problems and to extend the benefit of the doubt when I am unsure about something.
I was on the board of two clubs but I wasn't present. I realized I was wrong looking at the effects of my decision and asking advice.
You can't rip seams from mesh without destroying it I learned  you have to be very careful and defailted when sewing something in mesh.
"Because of my stubbornness and pride, I refused guidance and failed my first exam, I learned the importance of advocating for oneself."
learned needed to become more adaptable
I learned that it was totally normal to make mistakes
Fixing mistakes is a vital part of building intuition.
"If a learning method does not work, I should seek another method."
"I learned the importance of trying, experimenting and being wrong."
"I learned that failure is multidimensional, and a process towards success."
Taking risks and having things not go as planned isn't a bad thing after all.
Thought google pay would be better for app but i was wrong
"Hours before a deadline, I realized my code was wrong. From this I learned to raise concerns early and look at the problem from more angles."
"I learned that when I fail, it is best to fail quickly rather than drag out a failure."
I chose the wrong web framework which took extra time. I need to communicate the ideas behind my choices and to be open about the process.
"don't prematurely judge or assess situations -Supposedly catastrophic outcomes are rarely so catastrophic, they can in fact be quite the opposite."
"I learned that when face something I dont know, just do it and learn it, no need to worry about failure."
"I made a wrong UI layout for a client's website, where all the things get displayed in the home page itself."
I discovered that I was wrong and that it is important to actually speak to the people you're building things for
"I learned that if I had communicated my roadblocks more quickly to my superiors, I would have reached my goal sooner."
I realized my mistake that things were being lost in translation. I took more time to explain each feature in different ways.
"We built out an in-class live messaging board based on interview results, but found it ineffective in a live setting."
"I made the mistake of not voicing my opinions during design meetings, even when I felt I had a significant contribution."
"When working with a team, communicate when something is overwhelming and I don't have enough bandwidth to complete it well."
"The model had 95% accuracy, but it misclassified all of the samples. Accuracy is not the only metric to evaluate performance."
"My project is a VR simulation and I realized that my idea was wrong, and it was not possible to do what I intended in the program"
"I found out that my approach to accelerate the algorithm was wrong, since it is impossible to solve the algorithm in parallel."
"I learned that if one finds a problem in the process or that their approach is wrong, it is never too late to stop and reassess."
"When I make a mistake, the best thing I can do is try to understand what went wrong and focus my energy on how to fix the issue."
I learned that it I should not blame myself but should be happy that I make any mistake since this is where I can learn the most.
I believe I could have done better in the future by seeking more alternative options in the event of a timeline issue with the main option.
"Failing is inevitable, but I'm confident in my ability to adapt and change, to realize my wrongdoings, and to succeed the next day."
"I also learned that if I encounter problems, it is preferable to let my superiors know that there will be a delay as soon as possible."
I am constantly learning and failing. I look forward to being wrong because only then can I be taught something that I don't yet know.
Mistakes eliminate the wrong answers and sometimes lead to a new path.
"I learned that before import a new technology, I need to do enough investigation."
"I close my laptop in frustration. Ignoring technology, I resort to traditional methods. I think, and I think-I figure out my coding error"
"I have been wrong many times, but as long as I am open to making mistakes, and learning, I have been successful."
I am very careful to outline my criteria and idea and make sure that they will match up now and down the road
"From the failed interviews, I learned how to communicate better and the importance of analyzing and solving technical problems faster."
I didn't pay attention to a one line change that affects other's work. Communication and greater attention to detail is what I learned
I couldn't figure out my error. I realized it was a little difference. I learned to pay more attention to my notations.
I thought I was suposed to bring the homework to class instead of a mailbox.I learned to read every class syllabus.
"I misled a student as a TA and I explained my mistake, and he thanked me. learned to be honest and forthcoming about your own knowledge."
I was quick to choose a program without analyzing the data and making wireframes I learned to always take the time to plan and seek feedback
"I got bad score in midterm. I need to do better in my time management, and I should consult others for solutions"
"It is delicate work to find the line causing error among thousands. I start with the debug console, isolating the blcok of code"
"We focused on technical ability instead of passion for solving problems when hiring, but should have value passion more"
"I learned it's crucial to understand early in what makes every person tick I work on a team project, I want to know each person's motivation"
I learned to prioritize all the tasks and become vigilant on keeping my calendar.
I have learned that everything has to do with the resources and ability one has [but not how smart one is]
"I learned that I should have started with this more scalable fix in my code, anticipating that I'd have to add so many other ad slots."
"I learned to find the hidden impact of institutional choices on minority groups, and to destabilize existing structures of oppression."
"I learned that I did not understand the structure of a list in python, I need to fully understand the concept and not assume anything."
"Only after we figure out the performance that we need to achieve, we can think about something extra that will make our product better."
"I learned that communication and coordination are critical, and that my individual aspirations are not as important as the end product."
I used to go to museums to observe and absorb the artifacts without questioning its origins or how it was acquired by the institution.
"When working on large programming projects, investing more time in the design phase with careful considerations saves a lot more time."
"learned being a group leader isn't about individual effort to make the decisions, but individual commitment to creating that group effort"
"I once ran up to hug someone who I mistakenly thought was my mother; I caught an elbow to the nose and learned to look before you leap."""
I had a selfish desire to fit in with everyone else. I now strive to make an impact on the communities and make the world a better place.
I learned that I need to plan better.
"If I wanted to be productive in conversation, I needed to prepare questions and conversation topics, and have them ready to go in my head."
I learned to check in often with my team on what I am working on.
I'm now a staunch believer that honestly is indeed the best policy.
I will prepare myself better for interviews and try again next year!
"What I learned is to pay attention to the details, they are not easy."
Thankfully over the last few years I've had no major losses of my belongings.
I realized I saved a lot of time when I looked into best front end practices.
"I attempted to deviate from a recipe, but that caused my dough to over-rose."
The lesson I learned is that a thing is easy doesn't mean details can be ignored.
The interviewer was looking for a candidate who was readily prepared and I wasn't.
"I learned that before import a new technology, I need to do enough investigation."
"From then on, I have kept a robust and extensive backup of my own personal data at all times."
"While emotion is important, i've learned that opinions are weak without data to support them."
Every decision should be grounded in data and rigorous research as opposed to fuzzy gut feelings.
learned needed more backup plans