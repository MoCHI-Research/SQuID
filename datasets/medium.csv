"When I started working at a Vietnamese restaurant, I signed up to work for more hours than I could handle."
I learned that there are scenarios where some apparently less efficient solutions are actually more efficient and should be kept in mind.
"One of the most valued characteristics of a good UI is letting people have as much control as possible, so as to satisfy all user groups."
I made a mistake that lead to a breakdown on some internal service during an internship. I learned that testing is important in real life.
I learned that the simplest can sometimes beat the most innotative. I strive to buld solutions that are better suited for the end user.
"When my code got  deployed, it broke the program, meaning nobody could sign up for shifts.   I needed to validate the results of my code."
"I learned that being over zealous and volunteering can not only harm me, but could be a huge inconvenience to others as well."
"Regardless of how well I manage my time, I would still have a limited number of things that I could commit to and do well in."
wrong about how I should manage my time abroad-focused on schoolwork-wished made more friends and explored and travelled more
"I should not make commitments that drain me and leave me without sleep because I end up not being present, and it is unhealthy."
didn?t really know what computer programming actually was but I thought I would hate it. ended up loving the class and realizing I love CS
Once I thought doing well in one specific field will help me get a job but learned that there's way more expectations [skills] from the employer side
"I spent hours practicing a presentation, but then I went blank. I need more public speaking skills"
I was wrong to read the slides without looking into it. This taught me the valuable less to be fully responsbile for any work
"I felt as though my story idea was not good enough, and I learned it was the way I was presenting it that was wrong."
"took more credits then needed, no time for hobbies/activities, was wrong in thinking that it was important to take that many classes"
"If I decide to take on more work and more responsibility even for the short summer, that's my decision and thus, it's my responsibility to make sure that it has a positive impact."
My lack of preparation for the presentation caused confusion for the stakeholders who were introduced to the product for the first time.
It's helpful to start from the appropriate documentation of the target tools when you try to accomplish a programming task and get stuck.
realized how important it was that our platform provided unique features that made users excited even while performing often mundane tasks
I should not just copy and paste some code at the beginning. [should design something myself so it fits my needs]
It's better to read through the appropriate documentation and prototype your own solution than to rely on the walk-throughs and tutorials.
[messed up project deadline] avoiding a repeat by attempting to write down my deadlines and have short-term goals before the deadline
I learned that sizing up your work to present and your abilities is indeed a skill.
I learned that you have to work harder than everybody else to start something new.
"Do not assume there are tutorials online for everything. Don?t give up if there isn?t one. Always explore the official docs or even the source, there might be chance."
"Now, anytime I reference, produce, or present anything, I take full ownership of the subject."
"I learned that it's important to swallow your pride and ask for help, even when you don't want to."
I was told that I was spending too much time by being a perfectionist. I adjusted my working habit
I learned to question my assumptions and not be afraid of asking questions in any type of situation.
I learned that there are people who know better than you and it is not a shame to ask others for help.
"[java issues] redid all my work, made sure to read the documentation for everything. It turned out well"
"As a Computer Science student, no document is so familiar that is okay to overlook since the field is ever-changing."
We lost a day's worth a work waiting for an answer. Whenever you're stuck on something take a break and work on other areas of the project.
I that even great products need equally well-prepared and effective presentation to gain the approval and love of a wide audience.
I learned that I could easily get overwhelmed when I tried hard to solve an issue caused by myself but could not do anything helpful.
I created my own algorithm that combined some of the techniques along with ML. I learned to read all documention for any code I find.
"when developing an application based on certain requirements, think from different perspectives about potential bottlenecks in performance"
I learned that its vital for team members to split up work snd establish early how this splitting up can be made as seamless as possible.
A product is nothing without the customer.
I learned that I should always push myself.
"I didn't consider that my friends were unfamiliar with Java, so they were frustrated during hackathon and our progress was painfully slow."
"I should have learned to take things little by little, but I did not."
I did an interview with 100+ lines of code. I learned that it could be done in 15 lines I learned to look at different ways to solve.
"I learned how important it is to try the simplest thing possible first, in case that works, rather than trying the fancy idealistic model."
I learned to always think about the edge cases that can cause things to go wrong.
we realized the importance of integrating a simple A/B testing step in our design process.
"There's a balance between doing it right"" and ""doing what we want without overengineering""."""
"You can't always keep track of everything in mind, especially working in a team environment."
"My partner and I split the presentation content, and my partner stumbled and I couldn't help. I learned that we should have worked together"
You can create something wonderful but it's not complete until it is in the customer's hands.
"I realized that the ultimate user's feeling also matters, even more than the technology itself"
I had not taken into account the needs of the wider audience whose interests and specialties vary.
"I met my best friend in ROK Army and I joined a year later. I decided to study in the USA following him despite others disapproval, it worked out"
"Finally, I notice that sometimes inspiration is needed and it usually comes from other parts of our life. [rather than focusing only on one thing]"
"Groupmate pointed out a coding mistake, so I corrected the mistake and I never made the same mistake again."
"communicate with team as soon as you realize that something is wrong, so everyone is up to date with changes and can adapt to the situation"
"I thought I less prepared for my first cs class, but I was wrong. I found other people were feeling similar."
I understand the importance of working through a problem on paper with a team member before implementing it.
"I learnt from it I need divide my project into small steps, and check whether it works after each small step."
Just because something is challenging or new doesn't mean that you're not qualified for it or at a disadvantage.
rigorously testing code before deploying is vital because it's better that unexpected behavior arise during testing
I made a mistake that lead to a breakdown on some internal service during an internship. I learned that testing is important in real life.
I learned that it is better to cover the most basic and fundamental aspects of a project before doing anything else.
"When designing features, target problems that users do have rather than invent the problems and then try to solve them."
Friends could be wrong in knowing what?s best for me and that no one should be so quick to assess and judge another person.
I turned out to enjoy working with people with less technical backgrounds. THey look at things from a different perspective
"I overestimate my ability to manage schoolwork, extracurriculars, and internship, and ended up quiting my internship earlier."
"I understand that we can not always make a big break, sometimes a small change or a small innovation also needs lots of effort."
"When working on a project/feature that involves multiple teams, teams need to collaborate when coming up with the project specs."
"I realize the importance of open communication because although they did no work, I was partially at fault for not talking with them sooner"
"By teaming up with a friend I learned to have clear conversations, to discuss expectations and boundaries for the pset or project."
"I assumed that Columbia students would want the same seating options as Harvard students, but the survey results showed otherwise."
"I was wrong in pursuing a certain relationship. I learned to take a step back, and think want I really want, and not what is assumed of me."
I learned that it's important to see the big picture first before going into details so that I can consider many different options.
"I learned to be more honest about what I can accomplish with what I have, and that allowed me to create better, more in-depth work."
"I should first try to understand the audience's needs, desires and pain points, and use my project to first learn to learn myself."
"I was nervous to major in CS and was intimidated by the other students in intro courses, and was wrong about thinking you needed background"
"I never knew that I could rewrite my life script. I realized that I was writing my script, and that I had control over this script."
I learnt that we should always design and develop our product based on real users' experience and always do it in an incremental way
"I didn't have more empathy for my boss, who could not have seen how his actions looked from our point of view without us speaking up"
the importance of taking your own happiness in consideration before making long-term decisions that might benefit you in the future
"I find CS classes at Columbia difficult and intimidating, but I realize that time and effort will lead someone farther than one's talent""."""
"We should first make up a frame and then add features little by little, and at the meantime we should keep testing the new features."
"When I took ML, the group hw became meaningless because there was no teamwork. I learned to collaborate and be a better group leader."
I learned the importance of knowing your users and that only design and technical knowledge is not enough to decide what to build.
"I realized it was important, especially when working on a team, to communicate my misunderstandings before getting too far into the project."
"You can never over communicate"" with your team. It's better than to leave something uncommunicated."""
"I mistakenly loaded wrong dataset, which caused unexpected good performance. supervisor realized. I learned that too good to be true""."""
I realized that I could ask my group members to do more because they were more competent and more likely to work quickly through mistakes.
I thought coding up a functioning program could be done in one sitting. I struggled but I learned never to underestimate a project again!
I started a group food delivery model but it had no market. We changed our approach to seeking out a problem
I missed a deadline so I created a spreadsheet for all future projects to track progess
I was wrong to estimate the compexity of the task. It took the entire night and morning. I learned not to underestimate any tasks
"I was tasked with organizing the startup career fair. I did not understand how to do this, so my teammate told me how to talk to companies."
I learnt that we should always design and develop our product based on real users' experience and always do it in an incremental way
I realized that I was trying to do too many things and I couldn't be  a jack of all traded. I learned that I had to choose and priorize.
Since then I have always ensured that I communicate my difficulties to my immediate supervisors so that they are not caught off-guard.
I learned to use Calendar to fill the important events to the timeslots so that I would never missed a deadline.
I learned to plan my deadlines so that I could accommodate any last minute requirements and emergencies and still deliver comfortably.
we realized that the best way to approach the problem was to focus on many different types of users and not only the higher ranked users
I thought coding up a functioning program could be done in one sitting. I struggled but I learned never to underestimate a project again!
I underestimated multiple projects that were due on the same time. I learnt to give up on some portions to get the majority of the credit
I learned to first communicate with my teammates and know what to do next. It turns out that it?s worthwhile and somehow necessary to do.
My board and I hosted a photo critique workshop. I learned that empathy and imaging yourself in someone else's shoes are crucial skills.
"I should be honest about by work and my estimates, and it's my duty to ensure I meet deadlines by working harder if I've slacked earlier."
"I underestimated the time it would take to develop an app, I learned to really take the time in estimating the time of project completion."
"I should be vocal and ask for lighter load, different parameters, time, etc. early on so that the team can adjust less urgently."
Since then I have always ensured that I complete my work on time.
"to surround myself with those who push me and hold me to a standard I struggle to meet, but who inspire me to be a person of that quality"
"I wrote some database access methods incorrectly. I handled the situation by informing my group, and they were able to solve the problem"
In a hackathon I suggested an implementation which ended up costing us time. It taught me the importance of not over complicating things.
From this experience I learned not to stretch myself too much and to manage my time better.
"in undergrad, I chose to focus completely on courses. now I wish I was involved more in public interaction and thus built a better network"
I learned that interaction and collaboration between people in seemingly unrelated fields can foster new areas of interdisciplinary research
That made me awared that the importance of UI/UX and started to learn how to make better user interface.
I now understand that there is a lot of thought that goes behind what seems to be just a pretty (inter)face.
User interfaces and presentation are necessary to interact with and generate trust in smaller projects as well.
"I learned that user interfaces, and presentation in general, isn't just a concern for large-scale, polished tech companies."
I used to disregard good design. Looking at them from a third perspective gave me a clearer image and I decided to code my own css.
My project depends on the order of the data. My hack was to work in data sorted by ydefault.
it scares not knowing how data flows throughout a program until run-time. I realize that was wrong and I should treat programming as a tool
"I learned back-end Learning how to manipulate and sort data seemed big was my instrouction to networking, protocols, and user connectivity"
"I was wrong about the implementating of teh backend of my project. I used python instead of sql, and this required a complete overhaul"
"learned how to write scalable and maintainable react code REACT with constant feedback from boss, led to a great product and experience"
I learned about the importance of JavaScript in making a website interactive and also about a variety of different JavaScript libraries.
"Computers are unintuitive machines, and it's up to me to make sure everything is perfectly aligned to pave the way for meaningful code."
I realized VCS's key role in software development process.
What I learned was to think about extensibility and modularity far in advance.
"I used to ignore the function of JQuery, when writing front end webpage using Jade."
"as we go through the debugging process, we will have a deep understanding on mistakes we made so that we could avoid that mistake next time"
Dealing with promises and asynchronous function calls taught me how to approach unfamiliar paradigms.
"I learnt we need to add functional click on webpages, using JQuery or functions in HTML called JSP page."
"When building a web application, I learned that microservices operate differently than monolithic architecture."
"We 3D-printed our designs and put them to the test, and he won. Afterwards, he explained some great design principles."
Understanding is important because timer interrupts server as the entry into the linux scheduled to priotize processes.
So I actually had to call on our microservice and I was able to learn about front end web development because of this mistake.
"I lost an argument about AI, but I started to read more on why the human aspect of design and interface is almost irreplaceable."
It turns out you can do production level machine learning using only a few thousand labeled training data and facebook does that.
I programmed a script that took a long time. It caused me to call behind. I didn't put enough effort in verifying my implementation.
"I learned that I could compartmentalize different aspects, to scale up one function or service without scaling the entire application."
I realized our viewers wouldn't want to share on their timelines??it didn't speak to a shared experience and lacked comedic effect.
We made our app very scientific but then realized that no one would use it. I learnt that we first need to know our targets and their needs
I was careful and cognizant going forward. I focused on the intended user experience and the experience resulted from non-intentions.
"I was contracted to create a hotel management app in India. I assumed something translated across cultures in a way it didn't, and I missed a feature that could make my app more familiar."
This incident taught me how having a good UI helps build a first impression which goes a long way in the end users satisfaction in a project
I learnt that having an extremely capable product is essentially useless if the user does not have intuitive access to those very functions
"Working in industry and starting a software company with friends, it is extremely importnat to be well rounded in CS [web development]"
[working with imperfect data] you can take something imperfect and still find ways in which it is valid and useful without ignoring or hiding its problems
"I learned to read documentation, understand software infrastructure of a big corporate company, and manage my time and priority."
"[making art] I was wrong about only certain opinions mattering, and it's important to create art that really speaks to other people?s hearts"
I should make sure that I know of any complaints/requests made by parents since they're paying for their children's improved performance.
"I was tasked with building an API. At first, I found this overwhelming but I wasn't afraid to ask for help from my mentor who guided me."
I learned not to assume without concrete information.
I now ask for help much more often than I used to before.
You shouldn't be embarrassed or afraid of asking for help.
"I learned to be far more self-aware of my own faults, and less staunchly proud of my work."
I will always remember that it is better to stay grounded (literally) than to pretend you know all the answers.
"I went to the wrong location and missed the appointment, because I did not let my mom explain fully, but assumed to know all the details."
I learned the importance of consistently questioning one's self over choice of design for a client's use.
"I thought Finance is best for me, but I was wrong because it was not for me after I had experience as an investment banker."
"I thought Finance is best for me, but I was wrong because it was not for me after I had experience as an investment banker."
The biggest mistake I made is selecting wrong major in undergrad.  Learned to selec major based on interest
"I thought I wanted to do finance, but I was wrong."
I learnt to cut my losses and move into a field that I like. It is better to change your mind than to keep going in the wrong way
"I also started standardizing how I visually represented concepts, which provided a common framework for illustrating how I used it"
I didnt realize how much behind I was with tech experience. I utilized the resources at my disposal to improve and learn.
"I thought I wanted to ben an English major, but I realized I was wrong. I regret the time I wasted"
"I was wrong that I wanted to devote my life to sustainability consulting. I wanted my impact to be on an individual, so I got into comp sci."
I realized that college was going to be much more challenging than high school.
"I routinely try to explain things to myself or others to poke wholes in what I know, and start from first principles as often as I can"
"knowledge may be forgotten if we have not touched it for a long time, and things would not be as easier as we thought in the early time"
"I wrongly predicted I'd enjoy graphic design but I know what kind of design I want to pursue, so I don't regret taking the course at all!"
"I can't assume a formula for all programming problems, but rather understand how the interconnected parts work together to make a product."
"I was wrong about what I wanted with my future, which led to self-reflection where I was able to determine which direction I wanted to go."
I became aware of how important mathematical problem solving is to me and I needed to change course instead of staying in an industry that didnt interest me
...they chose the current algorithm because of its ability to give users fast results. I learned to be curious before providing criticism.
"[code debugging] learned that a trivial"" mistake could cause a big problem"
realized as I got higher and higher in computer science I would have to apply myself more.
I use Google and Piazza to study not only from my TA and professor but also my classmates.
"Don't try to re-invent the wheel, and be very mindful about existing resources and knowledge [program in JS]."
I learned from this that I should always check if where I want to go is open before going there
I realized I needed to change course instead of staying in an industry that wasn?t fulfilling me.
"I quickly learned that not every concept will be clear to me at its first instance, and that's okay."
I realized I studied the wrong thing and it really made me reconsider my workflow for lecture-based classes.
I learned that sometimes its best to take the risk and to hear out other people and take a decision without looking back
"Received negative feedback on proposed spec and had to fix, along the way, I gained valuable insight into the aspects that I had neglected."
I would not believe in something that I think it is. I learnt to verify the answer and make sure I am right before I tell someone about it.
"I learned that while questioning mentors about why"" something is done is good"
You should never be too invested in anything until you get to experience it first hand and there is no shame in following your heart.
"I did not PDF a hard class, leading to a bad grade. However, I learned that what I get out of a class's content is far more important."
I learned the value of engaging folks with institutional knowledge.
"[incorrect understanding of concept led to HW mistake] upon looking at the HW solution, I understood the concept and was able use it later"
"I learned the values of careful research, re-evaluating design choices on a daily basis, and considering tradeoffs."
"The value from different perspectives, when combined together is significantly greater than from one individual perspective."
"I learned that as I expand my social interactions circles, my worldview is expanded to include more ideas and possibilities."
I moved to Russia for a year and I learned more about the world and myself in that year than I could have in any other situation.
I learned to be vigilant about coordinating with people. I would manage to coordinate a week before and double check with the exec board.
"Sometimes I don't quite understand or misunderstand the assignment, and start working on it."
Planning ahead and confirm with teams is a more important step than the actual implementation.